name: Build and Release

on: workflow_dispatch

jobs:
  create-release:
    permissions:
      contents: write

    name: Build Binary
    runs-on: windows-2022
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.4"
          cache: "pip"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Build Executable
        run: pyinstaller --collect-all pyfiglet -i "icon.ico" -n H2M-Tool --onefile h2m-tool.py

      - name: Get the Most Recent Tag and Increment Version
        id: get_tag
        shell: powershell
        run: |
          $tag = git describe --tags --abbrev=0 2>$null
          if (-not $tag) {
            $tag = "v0.0"
          }

          if ($tag -match '^v(\d+)\.(\d+)$') {
            $major = [int]$matches[1]
            $patch = [int]$matches[2]
          } else {
            Write-Host "Tag does not match semantic versioning. Defaulting to v0.0"
            $major = 0
            $patch = 0
          }

          $patch += 1
          $newTag = "v$major.$minor.$patch"

          echo "LATEST_TAG=$tag" >> $env:GITHUB_ENV
          echo "NEW_TAG=$newTag" >> $env:GITHUB_ENV

      - name: Commit short hash
        id: vars
        shell: powershell
        run: |
          $shortCommitId = git rev-parse --short HEAD
          echo "SHORT_COMMIT_ID=$shortCommitId" >> $env:GITHUB_OUTPUT

      - name: Generate SHA-256 Hash
        id: sha256
        shell: powershell
        run: |
          $hash = Get-FileHash -Path "dist/H2M-Tool.exe" -Algorithm SHA256
          echo "SHA256_HASH=$($hash.Hash)" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: ${{ env.NEW_TAG }} Edition
          draft: false
          prerelease: false
          body: |
            ### SHA-256 Checksum
            ```
            ${{ steps.sha256.outputs.SHA256_HASH }}
            ```
          generate_release_notes: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/H2M.exe
          asset_name: H2M.exe
          asset_content_type: application/octet-stream
